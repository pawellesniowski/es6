const games = new Set();
console.log(games);  //Set {}
--

const games = new Set(['Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart', 'Super Mario Bros.']);
console.log(games);  //Set {'Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart'}
--

Methods: 
.add(), .delete(), clear()

const games = new Set(['Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart', 'Super Mario Bros.']);
games.add('Banjo-Tooie');
games.add('Age of Empires');
games.delete('Super Mario Bros.');
console.log(games) //Set {'Banjo-Kazooie', 'Mario Kart', 'Banjo-Tooie', 'Age of Empires'}


.size
const months = new Set(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
console.log(months.size); //12

.has()
Use the .has() method to check if an item exists in a Set. If the item is in the Set, then .has() will return true. If the item doesn’t exist in the Set, then .has() will return false.
console.log(months.has('September')); //true

.values() 
We use the .values() method to return the values in a Set. The return value of the .values() method is a SetIterator object.
console.log(months.values());
SetIterator {'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'}
 
TIP: The .keys() method will behave the exact same way as the .values() method by returning 
the values of a Set within a new Iterator Object. 
The .keys() method is an alias for the .values() method for similarity with maps. 
You’ll see the .keys() method later in this lesson during the Maps section.

--

Looping over Sets with next()
const iterator = months.values();
iterator.next(); //{value: 'January', done: false}
iterator.next(); //{value: 'February', done: false}
...
Looping over Sets with for of loop:
const colors = new Set(['red', 'orange', 'yellow', 'green', 'blue', 'violet', 'brown', 'black']);
for (const color of colors) {
  console.log(color); // red orange yellow green blue violet brown black
}

--

WeakSet:

a WeakSet can only contain objects
a WeakSet is not iterable which means it can’t be looped over
a WeakSet does not have a .clear() method

const student1 = { name: 'James', age: 26, gender: 'male' };
const student2 = { name: 'Julia', age: 27, gender: 'female' };
const student3 = { name: 'Richard', age: 31, gender: 'male' };

const roster = new WeakSet([student1, student2, student3]);

…but if you try to add something other (fex: roster.add('Amanda'); ) than an object, you’ll get an error!
This is expected behavior because WeakSets can only contain objects. 
But why should it only contain objects? 
Why would you even use a WeakSet if normal Sets can contain objects and other types of data? Well, 
the answer to that question has more to do with why WeakSets do not have a .clear() method...
Garbage Collection( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#Garbage_collection )
In JavaScript, memory is allocated when new values are created and is "automatically" 
freed up when those values are no longer needed. 
This process of freeing up memory after it is no longer needed is what is known as garbage collection.
WeakSets take advantage of this by exclusively working with objects. 
If you set an object to null, then you’re essentially deleting the object. 
And when JavaScript’s garbage collector runs, 
the memory that object previously occupied will be freed up to be used later in your program.

