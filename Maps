const employees = new Map();
console.log(employees); //Map {}

//Unlike Sets, you can’t create Maps from a list of values; instead, you add key-values by using the Map’s .set() method.

.set()
The .set() method takes two arguments. The first argument is the key, which is used to reference the second argument, the value.
employees.set('james.parkes@udacity.com', { 
    firstName: 'James',
    lastName: 'Parkes',
    role: 'Content Developer' 
});

// the key will be: james.parkes@udacity.com
// the value wil be following object

-- 
.delete()
// .delete(key); employees.delete('julia@udacity.com');

--
.clear() 
//similar to Sets, you can use the .clear() method to remove all key-value pairs from the Map.
 //TIP: If you .set() a key-value pair to a Map that already uses the same key, you won’t receive an error, but the key-value pair will overwrite what currently exists in the Map. Also, if you try to .delete() a key-value that is not in a Map, you won’t receive an error, and the Map will remain unchanged.
 // The .delete() method returns true if a key-value pair is successfully deleted from the Map object, and false if unsuccessful. The return value of .set() is the Map object itself if successful.
























