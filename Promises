https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

1. Intro:
Callbacks are default javascript technique fro dealing with asinchronous work.
Pass a function to another function and then call it later, when some condition have been met.
Problems with callbacks:
 - error handling (it is best to proctise, to assume that something at some point may go wrong. ).
 - what if this callback is also an asynchronous operation and you neet something else to happen afterwards, 
  do you pass another function with another callback here? 
  // Piramid of doom // hard to debug.
  loadImage("fold.img", imgContainer, function(){
    loadImage("below-fold.jpg", imgContainer2, function(){
      loadImage("last-one.jpg", imgContainerN)
    });
  });
  
  function loadImage(src, paren, callback){
    var img = document.createElement("img");
    img.src = src;
    img.onload = callback;
    parent.appendChild(img);  
  };


2. Stages of promises:
 1.Fullfiled/Resolved
 2.Rejected
 3.Pending
 4.Settled (something happend)
 
3. document.readyStage, has three possible states: 
  loading, 
  interactive(loaded and parsed, but some of parts likie images and style sheets have yet to load), 
  complete
